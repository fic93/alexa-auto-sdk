/*
 * Copyright 2017-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*********************************************************
**********************************************************
**********************************************************

THIS FILE IS AUTOGENERATED. DO NOT EDIT

**********************************************************
**********************************************************
*********************************************************/

#ifndef AUDIOOUTPUT_AUDIOSTREAMENCODING_H
#define AUDIOOUTPUT_AUDIOSTREAMENCODING_H

#include <string>
#include <vector>

#include <unordered_map>
#include <AACE/Engine/Utils/UUID/UUID.h>
#include <nlohmann/json.hpp>

namespace aasb {
namespace message {
namespace audio {

//Enum Definition
enum class AudioStreamEncoding {
    UNKNOWN,
    LPCM,
    MP3,
    OPUS,
};

inline std::string toString(AudioStreamEncoding enumValue) {
    switch (enumValue) {
        case (AudioStreamEncoding::UNKNOWN):
            return "UNKNOWN";
        case (AudioStreamEncoding::LPCM):
            return "LPCM";
        case (AudioStreamEncoding::MP3):
            return "MP3";
        case (AudioStreamEncoding::OPUS):
            return "OPUS";
    }
    throw std::runtime_error("invalidAudioStreamEncodingType");
}

inline AudioStreamEncoding toAudioStreamEncoding(const std::string& stringValue) {
    static std::unordered_map<std::string, AudioStreamEncoding> map = {
        {"UNKNOWN", AudioStreamEncoding::UNKNOWN},
        {"LPCM", AudioStreamEncoding::LPCM},
        {"MP3", AudioStreamEncoding::MP3},
        {"OPUS", AudioStreamEncoding::OPUS},
    };

    auto search = map.find(stringValue);
    if (search != map.end()) {
        return search->second;
    }
    throw std::runtime_error("invalidAudioStreamEncodingType");
}

inline void to_json(nlohmann::json& j, const AudioStreamEncoding& c) {
    j = toString(c);
}

inline void from_json(const nlohmann::json& j, AudioStreamEncoding& c) {
    c = toAudioStreamEncoding(j);
}

}  // namespace audio
}  // namespace message
}  // namespace aasb

#endif  // AUDIOOUTPUT_AUDIOSTREAMENCODING_H
