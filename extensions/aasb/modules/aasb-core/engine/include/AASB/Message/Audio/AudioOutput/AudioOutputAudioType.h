/*
 * Copyright 2017-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*********************************************************
**********************************************************
**********************************************************

THIS FILE IS AUTOGENERATED. DO NOT EDIT

**********************************************************
**********************************************************
*********************************************************/

#ifndef AUDIOOUTPUT_AUDIOOUTPUTAUDIOTYPE_H
#define AUDIOOUTPUT_AUDIOOUTPUTAUDIOTYPE_H

#include <string>
#include <vector>

#include <unordered_map>
#include <AACE/Engine/Utils/UUID/UUID.h>
#include <nlohmann/json.hpp>

namespace aasb {
namespace message {
namespace audio {

//Enum Definition
enum class AudioOutputAudioType {
    TTS,
    MUSIC,
    NOTIFICATION,
    ALARM,
    EARCON,
    COMMUNICATION,
    RINGTONE,
};

inline std::string toString(AudioOutputAudioType enumValue) {
    switch (enumValue) {
        case (AudioOutputAudioType::TTS):
            return "TTS";
        case (AudioOutputAudioType::MUSIC):
            return "MUSIC";
        case (AudioOutputAudioType::NOTIFICATION):
            return "NOTIFICATION";
        case (AudioOutputAudioType::ALARM):
            return "ALARM";
        case (AudioOutputAudioType::EARCON):
            return "EARCON";
        case (AudioOutputAudioType::COMMUNICATION):
            return "COMMUNICATION";
        case (AudioOutputAudioType::RINGTONE):
            return "RINGTONE";
    }
    throw std::runtime_error("invalidAudioOutputAudioTypeType");
}

inline AudioOutputAudioType toAudioOutputAudioType(const std::string& stringValue) {
    static std::unordered_map<std::string, AudioOutputAudioType> map = {
        {"TTS", AudioOutputAudioType::TTS},
        {"MUSIC", AudioOutputAudioType::MUSIC},
        {"NOTIFICATION", AudioOutputAudioType::NOTIFICATION},
        {"ALARM", AudioOutputAudioType::ALARM},
        {"EARCON", AudioOutputAudioType::EARCON},
        {"COMMUNICATION", AudioOutputAudioType::COMMUNICATION},
        {"RINGTONE", AudioOutputAudioType::RINGTONE},
    };

    auto search = map.find(stringValue);
    if (search != map.end()) {
        return search->second;
    }
    throw std::runtime_error("invalidAudioOutputAudioTypeType");
}

inline void to_json(nlohmann::json& j, const AudioOutputAudioType& c) {
    j = toString(c);
}

inline void from_json(const nlohmann::json& j, AudioOutputAudioType& c) {
    c = toAudioOutputAudioType(j);
}

}  // namespace audio
}  // namespace message
}  // namespace aasb

#endif  // AUDIOOUTPUT_AUDIOOUTPUTAUDIOTYPE_H
