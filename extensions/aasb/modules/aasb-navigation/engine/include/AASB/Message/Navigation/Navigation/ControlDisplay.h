/*
 * Copyright 2017-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*********************************************************
**********************************************************
**********************************************************

THIS FILE IS AUTOGENERATED. DO NOT EDIT

**********************************************************
**********************************************************
*********************************************************/

#ifndef NAVIGATION_CONTROLDISPLAY_H
#define NAVIGATION_CONTROLDISPLAY_H

#include <string>
#include <vector>

#include <unordered_map>
#include <AACE/Engine/Utils/UUID/UUID.h>
#include <nlohmann/json.hpp>

namespace aasb {
namespace message {
namespace navigation {
namespace navigation {

//Enum Definition
enum class ControlDisplay {
    SHOW_ROUTE_OVERVIEW,
    SHOW_DIRECTIONS_LIST,
    ZOOM_IN,
    ZOOM_OUT,
    CENTER_MAP_ON_CURRENT_LOCATION,
    ORIENT_NORTH,
    SCROLL_NORTH,
    SCROLL_UP,
    SCROLL_EAST,
    SCROLL_RIGHT,
    SCROLL_SOUTH,
    SCROLL_DOWN,
    SCROLL_WEST,
    SCROLL_LEFT,
    MUTE_ROUTE_GUIDANCE,
    UNMUTE_ROUTE_GUIDANCE,
};

inline std::string toString(ControlDisplay enumValue) {
    switch (enumValue) {
        case (ControlDisplay::SHOW_ROUTE_OVERVIEW):
            return "SHOW_ROUTE_OVERVIEW";
        case (ControlDisplay::SHOW_DIRECTIONS_LIST):
            return "SHOW_DIRECTIONS_LIST";
        case (ControlDisplay::ZOOM_IN):
            return "ZOOM_IN";
        case (ControlDisplay::ZOOM_OUT):
            return "ZOOM_OUT";
        case (ControlDisplay::CENTER_MAP_ON_CURRENT_LOCATION):
            return "CENTER_MAP_ON_CURRENT_LOCATION";
        case (ControlDisplay::ORIENT_NORTH):
            return "ORIENT_NORTH";
        case (ControlDisplay::SCROLL_NORTH):
            return "SCROLL_NORTH";
        case (ControlDisplay::SCROLL_UP):
            return "SCROLL_UP";
        case (ControlDisplay::SCROLL_EAST):
            return "SCROLL_EAST";
        case (ControlDisplay::SCROLL_RIGHT):
            return "SCROLL_RIGHT";
        case (ControlDisplay::SCROLL_SOUTH):
            return "SCROLL_SOUTH";
        case (ControlDisplay::SCROLL_DOWN):
            return "SCROLL_DOWN";
        case (ControlDisplay::SCROLL_WEST):
            return "SCROLL_WEST";
        case (ControlDisplay::SCROLL_LEFT):
            return "SCROLL_LEFT";
        case (ControlDisplay::MUTE_ROUTE_GUIDANCE):
            return "MUTE_ROUTE_GUIDANCE";
        case (ControlDisplay::UNMUTE_ROUTE_GUIDANCE):
            return "UNMUTE_ROUTE_GUIDANCE";
    }
    throw std::runtime_error("invalidControlDisplayType");
}

inline ControlDisplay toControlDisplay(const std::string& stringValue) {
    static std::unordered_map<std::string, ControlDisplay> map = {
        {"SHOW_ROUTE_OVERVIEW", ControlDisplay::SHOW_ROUTE_OVERVIEW},
        {"SHOW_DIRECTIONS_LIST", ControlDisplay::SHOW_DIRECTIONS_LIST},
        {"ZOOM_IN", ControlDisplay::ZOOM_IN},
        {"ZOOM_OUT", ControlDisplay::ZOOM_OUT},
        {"CENTER_MAP_ON_CURRENT_LOCATION", ControlDisplay::CENTER_MAP_ON_CURRENT_LOCATION},
        {"ORIENT_NORTH", ControlDisplay::ORIENT_NORTH},
        {"SCROLL_NORTH", ControlDisplay::SCROLL_NORTH},
        {"SCROLL_UP", ControlDisplay::SCROLL_UP},
        {"SCROLL_EAST", ControlDisplay::SCROLL_EAST},
        {"SCROLL_RIGHT", ControlDisplay::SCROLL_RIGHT},
        {"SCROLL_SOUTH", ControlDisplay::SCROLL_SOUTH},
        {"SCROLL_DOWN", ControlDisplay::SCROLL_DOWN},
        {"SCROLL_WEST", ControlDisplay::SCROLL_WEST},
        {"SCROLL_LEFT", ControlDisplay::SCROLL_LEFT},
        {"MUTE_ROUTE_GUIDANCE", ControlDisplay::MUTE_ROUTE_GUIDANCE},
        {"UNMUTE_ROUTE_GUIDANCE", ControlDisplay::UNMUTE_ROUTE_GUIDANCE},
    };

    auto search = map.find(stringValue);
    if (search != map.end()) {
        return search->second;
    }
    throw std::runtime_error("invalidControlDisplayType");
}

inline void to_json(nlohmann::json& j, const ControlDisplay& c) {
    j = toString(c);
}

inline void from_json(const nlohmann::json& j, ControlDisplay& c) {
    c = toControlDisplay(j);
}

}  // namespace navigation
}  // namespace navigation
}  // namespace message
}  // namespace aasb

#endif  // NAVIGATION_CONTROLDISPLAY_H
