/*
 * Copyright 2017-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*********************************************************
**********************************************************
**********************************************************

THIS FILE IS AUTOGENERATED. DO NOT EDIT

**********************************************************
**********************************************************
*********************************************************/

#ifndef APL_ACTIVITYEVENT_H
#define APL_ACTIVITYEVENT_H

#include <string>
#include <vector>

#include <unordered_map>
#include <AACE/Engine/Utils/UUID/UUID.h>
#include <nlohmann/json.hpp>

namespace aasb {
namespace message {
namespace apl {

//Enum Definition
enum class ActivityEvent {
    ACTIVATED,
    DEACTIVATED,
    ONE_TIME,
    INTERRUPT,
    UNKNOWN,
};

inline std::string toString(ActivityEvent enumValue) {
    switch (enumValue) {
        case (ActivityEvent::ACTIVATED):
            return "ACTIVATED";
        case (ActivityEvent::DEACTIVATED):
            return "DEACTIVATED";
        case (ActivityEvent::ONE_TIME):
            return "ONE_TIME";
        case (ActivityEvent::INTERRUPT):
            return "INTERRUPT";
        case (ActivityEvent::UNKNOWN):
            return "UNKNOWN";
    }
    throw std::runtime_error("invalidActivityEventType");
}

inline ActivityEvent toActivityEvent(const std::string& stringValue) {
    static std::unordered_map<std::string, ActivityEvent> map = {
        {"ACTIVATED", ActivityEvent::ACTIVATED},
        {"DEACTIVATED", ActivityEvent::DEACTIVATED},
        {"ONE_TIME", ActivityEvent::ONE_TIME},
        {"INTERRUPT", ActivityEvent::INTERRUPT},
        {"UNKNOWN", ActivityEvent::UNKNOWN},
    };

    auto search = map.find(stringValue);
    if (search != map.end()) {
        return search->second;
    }
    throw std::runtime_error("invalidActivityEventType");
}

inline void to_json(nlohmann::json& j, const ActivityEvent& c) {
    j = toString(c);
}

inline void from_json(const nlohmann::json& j, ActivityEvent& c) {
    c = toActivityEvent(j);
}

}  // namespace apl
}  // namespace message
}  // namespace aasb

#endif  // APL_ACTIVITYEVENT_H
