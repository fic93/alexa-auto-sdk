/*
 * Copyright 2017-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*********************************************************
**********************************************************
**********************************************************

THIS FILE IS AUTOGENERATED. DO NOT EDIT

**********************************************************
**********************************************************
*********************************************************/

#ifndef EXTERNALMEDIAADAPTER_PLAYCONTROLTYPE_H
#define EXTERNALMEDIAADAPTER_PLAYCONTROLTYPE_H

#include <string>
#include <vector>

#include <unordered_map>
#include <AACE/Engine/Utils/UUID/UUID.h>
#include <nlohmann/json.hpp>

namespace aasb {
namespace message {
namespace alexa {

//Enum Definition
enum class PlayControlType {
    PAUSE,
    RESUME,
    STOP,
    NEXT,
    PREVIOUS,
    START_OVER,
    FAST_FORWARD,
    REWIND,
    ENABLE_REPEAT_ONE,
    ENABLE_REPEAT,
    DISABLE_REPEAT,
    ENABLE_SHUFFLE,
    DISABLE_SHUFFLE,
    FAVORITE,
    UNFAVORITE,
};

inline std::string toString(PlayControlType enumValue) {
    switch (enumValue) {
        case (PlayControlType::PAUSE):
            return "PAUSE";
        case (PlayControlType::RESUME):
            return "RESUME";
        case (PlayControlType::STOP):
            return "STOP";
        case (PlayControlType::NEXT):
            return "NEXT";
        case (PlayControlType::PREVIOUS):
            return "PREVIOUS";
        case (PlayControlType::START_OVER):
            return "START_OVER";
        case (PlayControlType::FAST_FORWARD):
            return "FAST_FORWARD";
        case (PlayControlType::REWIND):
            return "REWIND";
        case (PlayControlType::ENABLE_REPEAT_ONE):
            return "ENABLE_REPEAT_ONE";
        case (PlayControlType::ENABLE_REPEAT):
            return "ENABLE_REPEAT";
        case (PlayControlType::DISABLE_REPEAT):
            return "DISABLE_REPEAT";
        case (PlayControlType::ENABLE_SHUFFLE):
            return "ENABLE_SHUFFLE";
        case (PlayControlType::DISABLE_SHUFFLE):
            return "DISABLE_SHUFFLE";
        case (PlayControlType::FAVORITE):
            return "FAVORITE";
        case (PlayControlType::UNFAVORITE):
            return "UNFAVORITE";
    }
    throw std::runtime_error("invalidPlayControlTypeType");
}

inline PlayControlType toPlayControlType(const std::string& stringValue) {
    static std::unordered_map<std::string, PlayControlType> map = {
        {"PAUSE", PlayControlType::PAUSE},
        {"RESUME", PlayControlType::RESUME},
        {"STOP", PlayControlType::STOP},
        {"NEXT", PlayControlType::NEXT},
        {"PREVIOUS", PlayControlType::PREVIOUS},
        {"START_OVER", PlayControlType::START_OVER},
        {"FAST_FORWARD", PlayControlType::FAST_FORWARD},
        {"REWIND", PlayControlType::REWIND},
        {"ENABLE_REPEAT_ONE", PlayControlType::ENABLE_REPEAT_ONE},
        {"ENABLE_REPEAT", PlayControlType::ENABLE_REPEAT},
        {"DISABLE_REPEAT", PlayControlType::DISABLE_REPEAT},
        {"ENABLE_SHUFFLE", PlayControlType::ENABLE_SHUFFLE},
        {"DISABLE_SHUFFLE", PlayControlType::DISABLE_SHUFFLE},
        {"FAVORITE", PlayControlType::FAVORITE},
        {"UNFAVORITE", PlayControlType::UNFAVORITE},
    };

    auto search = map.find(stringValue);
    if (search != map.end()) {
        return search->second;
    }
    throw std::runtime_error("invalidPlayControlTypeType");
}

inline void to_json(nlohmann::json& j, const PlayControlType& c) {
    j = toString(c);
}

inline void from_json(const nlohmann::json& j, PlayControlType& c) {
    c = toPlayControlType(j);
}

}  // namespace alexa
}  // namespace message
}  // namespace aasb

#endif  // EXTERNALMEDIAADAPTER_PLAYCONTROLTYPE_H
