/*
 * Copyright 2017-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*********************************************************
**********************************************************
**********************************************************

THIS FILE IS AUTOGENERATED. DO NOT EDIT

**********************************************************
**********************************************************
*********************************************************/

#ifndef LOCALMEDIASOURCE_SOURCE_H
#define LOCALMEDIASOURCE_SOURCE_H

#include <string>
#include <vector>

#include <unordered_map>
#include <AACE/Engine/Utils/UUID/UUID.h>
#include <nlohmann/json.hpp>

namespace aasb {
namespace message {
namespace alexa {
namespace localMediaSource {

//Enum Definition
enum class Source {
    BLUETOOTH,
    USB,
    FM_RADIO,
    AM_RADIO,
    SATELLITE_RADIO,
    LINE_IN,
    COMPACT_DISC,
    SIRIUS_XM,
    DAB,
};

inline std::string toString(Source enumValue) {
    switch (enumValue) {
        case (Source::BLUETOOTH):
            return "BLUETOOTH";
        case (Source::USB):
            return "USB";
        case (Source::FM_RADIO):
            return "FM_RADIO";
        case (Source::AM_RADIO):
            return "AM_RADIO";
        case (Source::SATELLITE_RADIO):
            return "SATELLITE_RADIO";
        case (Source::LINE_IN):
            return "LINE_IN";
        case (Source::COMPACT_DISC):
            return "COMPACT_DISC";
        case (Source::SIRIUS_XM):
            return "SIRIUS_XM";
        case (Source::DAB):
            return "DAB";
    }
    throw std::runtime_error("invalidSourceType");
}

inline Source toSource(const std::string& stringValue) {
    static std::unordered_map<std::string, Source> map = {
        {"BLUETOOTH", Source::BLUETOOTH},
        {"USB", Source::USB},
        {"FM_RADIO", Source::FM_RADIO},
        {"AM_RADIO", Source::AM_RADIO},
        {"SATELLITE_RADIO", Source::SATELLITE_RADIO},
        {"LINE_IN", Source::LINE_IN},
        {"COMPACT_DISC", Source::COMPACT_DISC},
        {"SIRIUS_XM", Source::SIRIUS_XM},
        {"DAB", Source::DAB},
    };

    auto search = map.find(stringValue);
    if (search != map.end()) {
        return search->second;
    }
    throw std::runtime_error("invalidSourceType");
}

inline void to_json(nlohmann::json& j, const Source& c) {
    j = toString(c);
}

inline void from_json(const nlohmann::json& j, Source& c) {
    c = toSource(j);
}

}  // namespace localMediaSource
}  // namespace alexa
}  // namespace message
}  // namespace aasb

#endif  // LOCALMEDIASOURCE_SOURCE_H
