/*
 * Copyright 2017-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*********************************************************
**********************************************************
**********************************************************

THIS FILE IS AUTOGENERATED. DO NOT EDIT

**********************************************************
**********************************************************
*********************************************************/

#ifndef ALEXASPEAKER_SPEAKERTYPE_H
#define ALEXASPEAKER_SPEAKERTYPE_H

#include <string>
#include <vector>

#include <unordered_map>
#include <AACE/Engine/Utils/UUID/UUID.h>
#include <nlohmann/json.hpp>

namespace aasb {
namespace message {
namespace alexa {

//Enum Definition
enum class SpeakerType {
    ALEXA_VOLUME,
    ALERTS_VOLUME,
};

inline std::string toString(SpeakerType enumValue) {
    switch (enumValue) {
        case (SpeakerType::ALEXA_VOLUME):
            return "ALEXA_VOLUME";
        case (SpeakerType::ALERTS_VOLUME):
            return "ALERTS_VOLUME";
    }
    throw std::runtime_error("invalidSpeakerTypeType");
}

inline SpeakerType toSpeakerType(const std::string& stringValue) {
    static std::unordered_map<std::string, SpeakerType> map = {
        {"ALEXA_VOLUME", SpeakerType::ALEXA_VOLUME},
        {"ALERTS_VOLUME", SpeakerType::ALERTS_VOLUME},
    };

    auto search = map.find(stringValue);
    if (search != map.end()) {
        return search->second;
    }
    throw std::runtime_error("invalidSpeakerTypeType");
}

inline void to_json(nlohmann::json& j, const SpeakerType& c) {
    j = toString(c);
}

inline void from_json(const nlohmann::json& j, SpeakerType& c) {
    c = toSpeakerType(j);
}

}  // namespace alexa
}  // namespace message
}  // namespace aasb

#endif  // ALEXASPEAKER_SPEAKERTYPE_H
