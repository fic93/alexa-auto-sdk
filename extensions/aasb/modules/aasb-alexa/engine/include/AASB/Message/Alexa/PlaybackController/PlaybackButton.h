/*
 * Copyright 2017-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*********************************************************
**********************************************************
**********************************************************

THIS FILE IS AUTOGENERATED. DO NOT EDIT

**********************************************************
**********************************************************
*********************************************************/

#ifndef PLAYBACKCONTROLLER_PLAYBACKBUTTON_H
#define PLAYBACKCONTROLLER_PLAYBACKBUTTON_H

#include <string>
#include <vector>

#include <unordered_map>
#include <AACE/Engine/Utils/UUID/UUID.h>
#include <nlohmann/json.hpp>

namespace aasb {
namespace message {
namespace alexa {

//Enum Definition
enum class PlaybackButton {
    PLAY,
    PAUSE,
    NEXT,
    PREVIOUS,
    SKIP_FORWARD,
    SKIP_BACKWARD,
};

inline std::string toString(PlaybackButton enumValue) {
    switch (enumValue) {
        case (PlaybackButton::PLAY):
            return "PLAY";
        case (PlaybackButton::PAUSE):
            return "PAUSE";
        case (PlaybackButton::NEXT):
            return "NEXT";
        case (PlaybackButton::PREVIOUS):
            return "PREVIOUS";
        case (PlaybackButton::SKIP_FORWARD):
            return "SKIP_FORWARD";
        case (PlaybackButton::SKIP_BACKWARD):
            return "SKIP_BACKWARD";
    }
    throw std::runtime_error("invalidPlaybackButtonType");
}

inline PlaybackButton toPlaybackButton(const std::string& stringValue) {
    static std::unordered_map<std::string, PlaybackButton> map = {
        {"PLAY", PlaybackButton::PLAY},
        {"PAUSE", PlaybackButton::PAUSE},
        {"NEXT", PlaybackButton::NEXT},
        {"PREVIOUS", PlaybackButton::PREVIOUS},
        {"SKIP_FORWARD", PlaybackButton::SKIP_FORWARD},
        {"SKIP_BACKWARD", PlaybackButton::SKIP_BACKWARD},
    };

    auto search = map.find(stringValue);
    if (search != map.end()) {
        return search->second;
    }
    throw std::runtime_error("invalidPlaybackButtonType");
}

inline void to_json(nlohmann::json& j, const PlaybackButton& c) {
    j = toString(c);
}

inline void from_json(const nlohmann::json& j, PlaybackButton& c) {
    c = toPlaybackButton(j);
}

}  // namespace alexa
}  // namespace message
}  // namespace aasb

#endif  // PLAYBACKCONTROLLER_PLAYBACKBUTTON_H
