/*
 * Copyright 2017-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*********************************************************
**********************************************************
**********************************************************

THIS FILE IS AUTOGENERATED. DO NOT EDIT

**********************************************************
**********************************************************
*********************************************************/

#ifndef ALEXACLIENT_AUTHERROR_H
#define ALEXACLIENT_AUTHERROR_H

#include <string>
#include <vector>

#include <unordered_map>
#include <AACE/Engine/Utils/UUID/UUID.h>
#include <nlohmann/json.hpp>

namespace aasb {
namespace message {
namespace alexa {

//Enum Definition
enum class AuthError {
    NO_ERROR,
    UNKNOWN_ERROR,
    AUTHORIZATION_FAILED,
    UNAUTHORIZED_CLIENT,
    SERVER_ERROR,
    INVALID_REQUEST,
    INVALID_VALUE,
    AUTHORIZATION_EXPIRED,
    UNSUPPORTED_GRANT_TYPE,
    INVALID_CODE_PAIR,
    AUTHORIZATION_PENDING,
    SLOW_DOWN,
    INTERNAL_ERROR,
    INVALID_CBL_CLIENT_ID,
};

inline std::string toString(AuthError enumValue) {
    switch (enumValue) {
        case (AuthError::NO_ERROR):
            return "NO_ERROR";
        case (AuthError::UNKNOWN_ERROR):
            return "UNKNOWN_ERROR";
        case (AuthError::AUTHORIZATION_FAILED):
            return "AUTHORIZATION_FAILED";
        case (AuthError::UNAUTHORIZED_CLIENT):
            return "UNAUTHORIZED_CLIENT";
        case (AuthError::SERVER_ERROR):
            return "SERVER_ERROR";
        case (AuthError::INVALID_REQUEST):
            return "INVALID_REQUEST";
        case (AuthError::INVALID_VALUE):
            return "INVALID_VALUE";
        case (AuthError::AUTHORIZATION_EXPIRED):
            return "AUTHORIZATION_EXPIRED";
        case (AuthError::UNSUPPORTED_GRANT_TYPE):
            return "UNSUPPORTED_GRANT_TYPE";
        case (AuthError::INVALID_CODE_PAIR):
            return "INVALID_CODE_PAIR";
        case (AuthError::AUTHORIZATION_PENDING):
            return "AUTHORIZATION_PENDING";
        case (AuthError::SLOW_DOWN):
            return "SLOW_DOWN";
        case (AuthError::INTERNAL_ERROR):
            return "INTERNAL_ERROR";
        case (AuthError::INVALID_CBL_CLIENT_ID):
            return "INVALID_CBL_CLIENT_ID";
    }
    throw std::runtime_error("invalidAuthErrorType");
}

inline AuthError toAuthError(const std::string& stringValue) {
    static std::unordered_map<std::string, AuthError> map = {
        {"NO_ERROR", AuthError::NO_ERROR},
        {"UNKNOWN_ERROR", AuthError::UNKNOWN_ERROR},
        {"AUTHORIZATION_FAILED", AuthError::AUTHORIZATION_FAILED},
        {"UNAUTHORIZED_CLIENT", AuthError::UNAUTHORIZED_CLIENT},
        {"SERVER_ERROR", AuthError::SERVER_ERROR},
        {"INVALID_REQUEST", AuthError::INVALID_REQUEST},
        {"INVALID_VALUE", AuthError::INVALID_VALUE},
        {"AUTHORIZATION_EXPIRED", AuthError::AUTHORIZATION_EXPIRED},
        {"UNSUPPORTED_GRANT_TYPE", AuthError::UNSUPPORTED_GRANT_TYPE},
        {"INVALID_CODE_PAIR", AuthError::INVALID_CODE_PAIR},
        {"AUTHORIZATION_PENDING", AuthError::AUTHORIZATION_PENDING},
        {"SLOW_DOWN", AuthError::SLOW_DOWN},
        {"INTERNAL_ERROR", AuthError::INTERNAL_ERROR},
        {"INVALID_CBL_CLIENT_ID", AuthError::INVALID_CBL_CLIENT_ID},
    };

    auto search = map.find(stringValue);
    if (search != map.end()) {
        return search->second;
    }
    throw std::runtime_error("invalidAuthErrorType");
}

inline void to_json(nlohmann::json& j, const AuthError& c) {
    j = toString(c);
}

inline void from_json(const nlohmann::json& j, AuthError& c) {
    c = toAuthError(j);
}

}  // namespace alexa
}  // namespace message
}  // namespace aasb

#endif  // ALEXACLIENT_AUTHERROR_H
