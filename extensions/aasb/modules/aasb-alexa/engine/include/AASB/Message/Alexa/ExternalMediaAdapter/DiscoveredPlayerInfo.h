/*
 * Copyright 2017-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*********************************************************
**********************************************************
**********************************************************

THIS FILE IS AUTOGENERATED. DO NOT EDIT

**********************************************************
**********************************************************
*********************************************************/

#ifndef EXTERNALMEDIAADAPTER_DISCOVEREDPLAYERINFO_H
#define EXTERNALMEDIAADAPTER_DISCOVEREDPLAYERINFO_H

#include <string>
#include <vector>

#include <AACE/Engine/Utils/UUID/UUID.h>
#include <nlohmann/json.hpp>
#include "AASB/Message/Alexa/ExternalMediaAdapter/ValidationMethod.h"
#include "AASB/Message/Alexa/ExternalMediaAdapter/ValidationData.h"

namespace aasb {
namespace message {
namespace alexa {

//Class Definition
struct DiscoveredPlayerInfo {
    using ValidationMethod = ::aasb::message::alexa::ValidationMethod;

    std::string toString() const;
    std::string localPlayerId;
    std::string spiVersion;
    ValidationMethod validationMethod;
    std::vector<ValidationData> validationData;
};

//JSON Serialization
inline void to_json(nlohmann::json& j, const DiscoveredPlayerInfo& c) {
    j = nlohmann::json{
        {"localPlayerId", c.localPlayerId},
        {"spiVersion", c.spiVersion},
        {"validationMethod", c.validationMethod},
        {"validationData", c.validationData},
    };
}
inline void from_json(const nlohmann::json& j, DiscoveredPlayerInfo& c) {
    j.at("localPlayerId").get_to(c.localPlayerId);
    j.at("spiVersion").get_to(c.spiVersion);
    j.at("validationMethod").get_to(c.validationMethod);
    j.at("validationData").get_to(c.validationData);
}

inline std::string DiscoveredPlayerInfo::toString() const {
    nlohmann::json j = *this;
    return j.dump(3);
}

}  // namespace alexa
}  // namespace message
}  // namespace aasb

#endif  // EXTERNALMEDIAADAPTER_DISCOVEREDPLAYERINFO_H
