/*
 * Copyright 2017-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*********************************************************
**********************************************************
**********************************************************

THIS FILE IS AUTOGENERATED. DO NOT EDIT

**********************************************************
**********************************************************
*********************************************************/

#ifndef EXTERNALMEDIAADAPTER_MEDIATYPE_H
#define EXTERNALMEDIAADAPTER_MEDIATYPE_H

#include <string>
#include <vector>

#include <unordered_map>
#include <AACE/Engine/Utils/UUID/UUID.h>
#include <nlohmann/json.hpp>

namespace aasb {
namespace message {
namespace alexa {

//Enum Definition
enum class MediaType {
    TRACK,
    PODCAST,
    STATION,
    AD,
    SAMPLE,
    OTHER,
};

inline std::string toString(MediaType enumValue) {
    switch (enumValue) {
        case (MediaType::TRACK):
            return "TRACK";
        case (MediaType::PODCAST):
            return "PODCAST";
        case (MediaType::STATION):
            return "STATION";
        case (MediaType::AD):
            return "AD";
        case (MediaType::SAMPLE):
            return "SAMPLE";
        case (MediaType::OTHER):
            return "OTHER";
    }
    throw std::runtime_error("invalidMediaTypeType");
}

inline MediaType toMediaType(const std::string& stringValue) {
    static std::unordered_map<std::string, MediaType> map = {
        {"TRACK", MediaType::TRACK},
        {"PODCAST", MediaType::PODCAST},
        {"STATION", MediaType::STATION},
        {"AD", MediaType::AD},
        {"SAMPLE", MediaType::SAMPLE},
        {"OTHER", MediaType::OTHER},
    };

    auto search = map.find(stringValue);
    if (search != map.end()) {
        return search->second;
    }
    throw std::runtime_error("invalidMediaTypeType");
}

inline void to_json(nlohmann::json& j, const MediaType& c) {
    j = toString(c);
}

inline void from_json(const nlohmann::json& j, MediaType& c) {
    c = toMediaType(j);
}

}  // namespace alexa
}  // namespace message
}  // namespace aasb

#endif  // EXTERNALMEDIAADAPTER_MEDIATYPE_H
