/*
 * Copyright 2017-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*********************************************************
**********************************************************
**********************************************************

THIS FILE IS AUTOGENERATED. DO NOT EDIT

**********************************************************
**********************************************************
*********************************************************/

#ifndef PHONECALLCONTROLLER_CALLSTATE_H
#define PHONECALLCONTROLLER_CALLSTATE_H

#include <string>
#include <vector>

#include <unordered_map>
#include <AACE/Engine/Utils/UUID/UUID.h>
#include <nlohmann/json.hpp>

namespace aasb {
namespace message {
namespace phoneCallController {

//Enum Definition
enum class CallState {
    IDLE,
    DIALING,
    OUTBOUND_RINGING,
    ACTIVE,
    CALL_RECEIVED,
    INBOUND_RINGING,
};

inline std::string toString(CallState enumValue) {
    switch (enumValue) {
        case (CallState::IDLE):
            return "IDLE";
        case (CallState::DIALING):
            return "DIALING";
        case (CallState::OUTBOUND_RINGING):
            return "OUTBOUND_RINGING";
        case (CallState::ACTIVE):
            return "ACTIVE";
        case (CallState::CALL_RECEIVED):
            return "CALL_RECEIVED";
        case (CallState::INBOUND_RINGING):
            return "INBOUND_RINGING";
    }
    throw std::runtime_error("invalidCallStateType");
}

inline CallState toCallState(const std::string& stringValue) {
    static std::unordered_map<std::string, CallState> map = {
        {"IDLE", CallState::IDLE},
        {"DIALING", CallState::DIALING},
        {"OUTBOUND_RINGING", CallState::OUTBOUND_RINGING},
        {"ACTIVE", CallState::ACTIVE},
        {"CALL_RECEIVED", CallState::CALL_RECEIVED},
        {"INBOUND_RINGING", CallState::INBOUND_RINGING},
    };

    auto search = map.find(stringValue);
    if (search != map.end()) {
        return search->second;
    }
    throw std::runtime_error("invalidCallStateType");
}

inline void to_json(nlohmann::json& j, const CallState& c) {
    j = toString(c);
}

inline void from_json(const nlohmann::json& j, CallState& c) {
    c = toCallState(j);
}

}  // namespace phoneCallController
}  // namespace message
}  // namespace aasb

#endif  // PHONECALLCONTROLLER_CALLSTATE_H
